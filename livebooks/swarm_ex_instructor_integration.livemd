# Swarm_Ex - Instructor Integration - fork

```elixir
Mix.install(
  [
    {:instructor, "~> 0.0.5"},
    {:openai_ex, "~> 0.8.4"},
    {:swarm_ex, path: "/Users/norris/Projects/swarm_ex"},
    {:jason, "~> 1.4"},
    {:kino, "~> 0.14.2"}
  ],
  config: [
    instructor: [
      adapter: Instructor.Adapters.OpenAI,
      openai: [api_key: System.fetch_env!("LB_OPENAI_API_KEY")]
    ]
  ]
)
```

## Define Example Modules

````elixir
defmodule StarWarsClassifier do
  use Ecto.Schema
  use Instructor.Validator

  @doc """
  ## Field Descriptions:
  - is_star_wars: Whether or not the message is related to star wars
  - reason: A short, less than 10 word rationalization for the classification.
  - score: A confidence score between 0.0 and 1.0 for the classification.
  """
  @primary_key false
  embedded_schema do
    field(:is_star_wars, :boolean)
    field(:reason, :string)
    field(:score, :float)
  end

  @impl true
  def validate_changeset(changeset) do
    changeset
    |> Ecto.Changeset.validate_number(:score,
      greater_than_or_equal_to: 0.0,
      less_than_or_equal_to: 1.0
    )
  end

  def is_star_wars?(text) do
    Instructor.chat_completion(
      model: "gpt-4o-mini",
      response_model: __MODULE__,
      max_retries: 3,
      messages: [
        %{
          role: "user",
          content: """
          Your purpose is to classify if an incoming message is related to star wars or not.
  
          Classify the following message: 
          ```
          #{text}
          ```
          """
        }
      ]
    )
  end
end
````

```elixir
StarWarsClassifier.is_star_wars?("Christmas cookies are the best!")
```

```elixir
StarWarsClassifier.is_star_wars?("I have a bad feeling about this.")
```

````elixir
defmodule YodaReply do
  use Ecto.Schema
  use Instructor.Validator

  @doc """
  ## Field Descriptions:
  - quote: A fitting reply in the tone and style of Yoda.
  """
  @primary_key false
  embedded_schema do
    field(:reply, :string)
  end

  def yoda_reply?(text) do
    Instructor.chat_completion(
      model: "gpt-4o-mini",
      response_model: __MODULE__,
      max_retries: 3,
      messages: [
        %{
          role: "user",
          content: """
          Your purpose is to reply in the tone and style of Master Yoda.
  
          Reply to the following message: 
          ```
          #{text}
          ```
          """
        }
      ]
    )
  end
end
````

```elixir
# Message Classification Tool
defmodule ClassifyMessageTool do
  @behaviour SwarmEx.Tool

  @impl true
  def execute(%{message: message}) do
    # For now, simple keyword matching
    {:ok, %{is_star_wars: _is_star_wars}} = StarWarsClassifier.is_star_wars?(message)
  end

  @impl true
  def validate(%{message: _}), do: :ok
  def validate(_), do: {:error, :invalid_args}

  @impl true
  def cleanup(_), do: :ok
end

```

```elixir
# Star Wars Response Tool
defmodule StarWarsResponseTool do
  @behaviour SwarmEx.Tool

  @impl true
  def execute(%{message: message}) do
    {:ok, %{reply: _reply}} = YodaReply.yoda_reply?(message)
  end

  @impl true
  def validate(%{message: _}), do: :ok
  def validate(_), do: {:error, :invalid_args}

  @impl true
  def cleanup(_), do: :ok
end
```

```elixir
defmodule TriageAgent do
  use SwarmEx.Agent

  @impl true
  def handle_message(%Message{role: :user, content: content} = msg, state) do
    Logger.info(state)
    # Directly execute the ClassifyMessageTool instead of using execute_tool
    case ClassifyMessageTool.execute(%{message: content}) do
      {:ok, %{is_star_wars: true}} ->
        Logger.info("Message classified as Star Wars related. Handing off to StarWarsAgent.")
        handoff_to_star_wars(msg, state)
      
      {:ok, %{is_star_wars: false}} ->
        Logger.info("Message not Star Wars related. Providing general response.")
        reply = %Message{
          role: :assistant,
          content: "Hi, how can I help?",
          agent: Map.get(state, :name, self())
        }
        {:ok, reply, state}
      
      {:error, reason} ->
        Logger.error("Classification failed: #{inspect(reason)}")
        reply = %Message{
          role: :assistant,
          content: "Sorry, I couldn't process your message.",
          agent: Map.get(state, :name, self())
        }
        {:error, reply}
    end
  end

  @impl true
  def handle_handoff(target, state) do
    {:ok, state}
  end

  defp handoff_to_star_wars(message, state) do
    case state[:star_wars_agent] do
      nil -> 
        reply = %Message{
          role: :assistant,
          content: "Star Wars agent not configured",
          agent: Map.get(state, :name, self())
        }
        {:error, reply}
      agent_pid -> 
        case SwarmEx.send_message_to_pid(agent_pid, message) do
          {:ok, response} -> {:ok, response, state}
          error -> error
        end
    end
  end
end
```

```elixir
# Star Wars Specialist Agent
defmodule StarWarsAgent do
  use SwarmEx.Agent

  @impl true
  def handle_message(%Message{role: :user, content: content} = _msg, state) do
    Logger.info(state)
    case StarWarsResponseTool.execute(%{message: content}) do
      {:ok, %{reply: reply}} -> 
        Logger.info("Generated a response from Yoda.")
        response = %Message{
          role: :assistant,
          content: reply,
          agent: Map.get(state, :name, self())
        }
        {:ok, response, state}
      {:error, reason} -> 
        Logger.error("Reply failed: #{inspect(reason)}")
        response = %Message{
          role: :assistant,
          content: "Sorry, I couldn't reply to your message.",
          agent: Map.get(state, :name, self())
        }
        {:error, response}
    end
  end
end
```

```elixir
# Create network and agents
{:ok, network} = SwarmEx.create_network()
```

```elixir
# Create the Star Wars agent first
sw_opts = [name: "star_wars_agent"]
{:ok, star_wars_agent} = SwarmEx.create_agent(network, StarWarsAgent, sw_opts)
```

```elixir
SwarmEx.Client.list_agents(network)
```

```elixir
# Create the triage agent with reference to the Star Wars agent
tr_opts = [name: "triage_agent", star_wars_agent: star_wars_agent]
{:ok, triage_agent} = SwarmEx.create_agent(
  network, 
  TriageAgent, 
  tr_opts
)
```

```elixir
Node.get_cookie()
```

<!-- livebook:{"branch_parent_index":0} -->

## Chat

```elixir
frame = Kino.Frame.new()
```

```elixir
inputs = [
  message: Kino.Input.textarea("Message")
]

form = Kino.Control.form(inputs, submit: "Send")

# To Trigger the Star Wars agent you can ask:
# Explain the history and life of the Mandalorians?
```

```elixir
Kino.Frame.render(frame, "Welcome to Agent Chat!")

for %{data: data} <- Kino.Control.stream(form) do
  Kino.Frame.append(frame, "user: #{data.message}")
  
  # Create Message struct for the user's message
  message = %SwarmEx.Message{
    role: :user,
    content: data.message,
    agent: nil
  }
  
  # Send message and handle response
  case SwarmEx.send_message(network, "triage_agent", message) do
    {:ok, response} ->
      Kino.Frame.append(frame, "agent: #{response.content}")
    {:error, error} ->
      Kino.Frame.append(frame, "Error: #{inspect(error)}")
  end
end
```

<!-- livebook:{"offset":7191,"stamp":{"token":"XCP.l3MMEazzLFNKeDJ_8rk1WtJGab222Hb7kREbgwNwUdz0Oz7HoyxdwwZNXgYj29PNbHhMPZswrUcNQmnirKLzMwVBu5PIvIRRV9XJCSWcdhiykmki7FpmO-Q","version":2}} -->
